{"version":3,"sources":["request.js","components/useRequest.js","components/Request.js","index.js"],"names":["parseJSON","response","status","json","checkStatus","error","Error","statusText","data","text","then","JSON","parse","console","log","request","url","options","fetch","headers","useRequest","method","variables","fire","setError","loading","setLoading","setData","doRequest","additionalVariables","Object","keys","length","allVariables","toUpperCase","body","stringify","map","key","join","e","Request","children","refetch","propTypes","PropTypes","string","isRequired","object","withJWT","bool","any"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["/**\n * \n * From react-boilerplate\n * https://github.com/react-boilerplate/react-boilerplate\n * \n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  error.data = response.text().then(text => {\n    if (text) {\n      try {\n        return JSON.parse(text);\n      } catch (error) {\n        console.log(\"parse text failed: \" + text);\n        return { error: text };\n      }\n    } else {\n      return {};\n    }\n  });\n\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options = {}) {\n  return fetch(url, {\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options.headers\n    }\n  })\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import { useState, useEffect } from \"react\";\nimport request from \"../request\";\n\n/**\n * Request hook\n *\n * @param {{url: string, method: string, variables: object, headers: object, withJWT: boolean, refetch: boolean, fire: boolean}} props\n */\nconst useRequest = ({\n  url,\n  method = \"GET\",\n  variables,\n  headers = {},\n  fire = true // conditionally fire the rquest to prevent multiple fetch durign rerenders\n}) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n\n  const doRequest = async (additionalVariables = {}) => {\n    const options = {};\n    options.method = method;\n\n    if (\n      (variables && Object.keys(variables).length > 0) ||\n      (additionalVariables && Object.keys(additionalVariables).length > 0)\n    ) {\n      let allVariables = { ...variables };\n      if (additionalVariables) {\n        allVariables = { ...variables, ...additionalVariables };\n      }\n\n      if (method.toUpperCase() !== \"GET\") {\n        options.body = JSON.stringify(allVariables);\n      } else {\n        url += `?${Object.keys(allVariables)\n          .map(key => `${key}=${allVariables[key]}`)\n          .join(\"&\")}`;\n      }\n    }\n\n    if (headers) {\n      options.headers = headers;\n    }\n    try {\n      setLoading(true);\n      const response = await request(url, options);\n      setData(response);\n      setLoading(false);\n      return response;\n    } catch (e) {\n      setError(e);\n      return {};\n    }\n  };\n\n  useEffect(() => {\n    if (fire) {\n      if (method.toUpperCase() === \"GET\") {\n        doRequest();\n      }\n    }\n  }, [url, method, JSON.stringify(variables)]);\n\n  return { loading, error, data, doRequest };\n};\nexport default useRequest;\n","import PropTypes from \"prop-types\";\nimport useRequest from \"./useRequest\";\n\n/**\n * refetch prop is used to control whether to refetch content after\n * a post or put request. The Request component will depend on its value\n * change to do the fetch, the boolean value is just a convenient flag to\n * indicate a change. \n * \n * @example\n * GET:\n * <Request\n *   url=\"/url/to/source\"\n *   method=\"GET\"\n *   variables={{ page: 1, per_page: 10 }}\n * >\n *  {({ loading, error, data }) => {\n *   return <component />;\n *  }}\n *  </Request>\n * \n * \n * POST || PUT || DELETE\n * <Request\n *  method=\"POST\"\n *  url=\"/url/to/source\"\n *  variables={{ name: \"John Doe\" }}\n * >\n * {(doRequest, { loading, error, data }) => {\n *    return <Button onClick={() => doRequest()}>Add</Button>;\n * }}\n</Request>\n *\n * @param {{url: string, method: string, variables: object, headers: object, withJWT: boolean, refetch: boolean, fire: boolean}} props\n */\nfunction Request({\n  children,\n  url,\n  method = \"GET\",\n  variables,\n  headers = {},\n  fire = true // conditionally fire the rquest to prevent multiple fetch durign rerenders\n}) {\n  const { loading, error, data, doRequest } = useRequest({\n    url,\n    method,\n    variables,\n    headers,\n    fire\n  });\n\n  // if (!fire) return children(doRequest);\n  return method.toUpperCase() === \"GET\"\n    ? children({ loading, error, data, refetch: doRequest })\n    : children(doRequest, { loading, error, data });\n};\n\nRequest.propTypes = {\n  url: PropTypes.string.isRequired,\n  method: PropTypes.string,\n  variables: PropTypes.object,\n  headers: PropTypes.object,\n  withJWT: PropTypes.bool,\n  children: PropTypes.any,\n  refetch: PropTypes.bool\n};\n\nexport default Request;\n","import Request from \"./components/Request\";\nimport useRequest from \"./components/useRequest\";\n\nexport { Request, useRequest };"]}